;****************************************************************************
; VDP registers
;****************************************************************************

VDPREG_MODE1        equ $8000           ; Video mode registers
VDPREG_MODE2        equ $8100
VDPREG_MODE3        equ $8B00
VDPREG_MODE4        equ $8C00

VDPREG_PLANEA       equ $8200           ; Nametable base addresses
VDPREG_PLANEB       equ $8400
VDPREG_WINDOW       equ $8300
VDPREG_SPRITE       equ $8500
VDPREG_HSCROLL      equ $8D00

VDPREG_MAPSIZE      equ $9000           ; Plane A and B size
VDPREG_WINX         equ $9100           ; Window X boundary
VDPREG_WINY         equ $9200           ; Window Y boundary

VDPREG_AUTOINCR     equ $8F00           ; Autoincrement
VDPREG_BGCOLOR      equ $8700           ; Background color
VDPREG_HINTRATE     equ $8A00           ; How often hblank IRQ fires

;****************************************************************************
; InitVideo
; Initializes the video hardware.
;----------------------------------------------------------------------------
; breaks ........ all
;****************************************************************************

InitVideo:
    lea     (VdpCtrl), a0
    lea     (VdpData), a1
    
    tst.w   (a0)                        ; Discard any pending VDP command
    
    move.w  #VDPREG_MODE1|$04, (a0)     ; Set up VDP registers
    move.w  #VDPREG_MODE2|$24, (a0)
    move.w  #VDPREG_MODE4|$81, (a0)
    move.w  #VDPREG_MODE3|$00, (a0)
    
    move.w  #VDPREG_PLANEA|$38, (a0)
    move.w  #VDPREG_PLANEB|$07, (a0)
    move.w  #VDPREG_WINDOW|$00, (a0)
    move.w  #VDPREG_SPRITE|$00, (a0)
    move.w  #VDPREG_HSCROLL|$00, (a0)
    
    move.w  #VDPREG_MAPSIZE|$01, (a0)
    move.w  #VDPREG_WINX|$00, (a0)
    move.w  #VDPREG_WINY|$00, (a0)
    
    move.w  #VDPREG_AUTOINCR|$02, (a0)
    move.w  #VDPREG_BGCOLOR|$00, (a0)
    move.w  #VDPREG_HINTRATE|$FF, (a0)
    
    moveq   #0, d0                      ; Clear VRAM
    move.l  #$40000000, (a0)
    move.w  #($10000/$20)-1, d7
@ClearVram:
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    move.l  d0, (a1)
    dbf     d7, @ClearVram
    
    lea     (FontGfx), a6               ; Load font
    move.l  #$40200000, (a0)
    moveq   #37-1, d7
@LoadFont:
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    dbf     d7, @LoadFont
    
    move.l  #$C0000000, (a0)            ; Load palette
    move.l  #$00000EEE, (a1)
    move.w  #$0444, (a1)
    
    move.l  #$40000010, (a0)            ; Reset vscroll
    move.l  d0, (a1)
    
    rts                                 ; End of subroutine

;****************************************************************************
; VBlank
; Handler for the vblank interrupt
;****************************************************************************

VBlank:
    st.b    (VBlankFlag)                ; Set the flag for VSync
    rte                                 ; End of interrupt

;****************************************************************************
; VSync
; Waits until the next vblank starts.
;----------------------------------------------------------------------------
; breaks ........ d5,d6,d7,a4,a5,a6
;****************************************************************************

VSync:
    move.w  #$2000, sr                  ; Enable interrupts
    
    clr.b   (VBlankFlag)                ; Clear the flag and wait until the
@Loop:                                  ; vblank interrupt sets it again
    tst.b   (VBlankFlag)
    beq.s   @Loop
    
    rts                                 ; End of subroutine

;****************************************************************************
; WriteText
; Writes a nul-terminated string on screen.
;----------------------------------------------------------------------------
; input d7.w .... X coordinate
; input d6.w .... Y coordinate
; input a6.l .... pointer to string
;----------------------------------------------------------------------------
; breaks ........ d5,d6,d7,a4,a5,a6
;****************************************************************************

WriteText:
    lea     (VdpData), a5
    lea     @Table-$20(pc), a4
    
    lsl.w   #6, d6                      ; Determine VRAM address
    add.w   d6, d7
    add.w   d7, d7
    add.w   #$E000, d7
    
    and.l   #$FFFF, d7                  ; Set up VRAM address
    lsl.l   #2, d7
    lsr.w   #2, d7
    or.w    #$4000, d7
    swap    d7
    move.l  d7, 4(a5)
    
@Loop:
    moveq   #0, d7                      ; Get next character (if any)
    move.b  (a6)+, d7
    beq.s   @End
    
    move.b  (a4,d7.w), d7               ; Convert from ASCII to tile ID
    move.w  d7, (a5)                    ; Put tile into tilemap
    
    bra.s   @Loop                       ; Keep drawing
    
@End:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Table:
    dc.b     0, 0, 0, 0, 0, 0, 0, 0     ; U+0020..U+0027
    dc.b     0, 0, 0, 0, 0, 0,37, 0     ; U+0028..U+002F
    dc.b     1, 2, 3, 4, 5, 6, 7, 8     ; U+0030..U+0037
    dc.b     9,10, 0, 0, 0, 0, 0, 0     ; U+0038..U+003F
    dc.b     0,11,12,13,14,15,16,17     ; U+0040..U+0047
    dc.b    18,19,20,21,22,23,24,25     ; U+0048..U+004F
    dc.b    26,27,28,29,30,31,32,33     ; U+0050..U+0057
    dc.b    34,35,36, 0, 0, 0, 0, 0     ; U+0058..U+005F
